name: Tag Release

on:
  push:
    tags:
      - "*"

jobs:
  push-images:
    name: Build Docker images and push to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend # Location of Dockerfile
          push: true # Push to Docker Hub
          tags: alihmohammad/devops-frontend:${{ github.ref_name }} # Tags image with github tag from repo

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend # Location of Dockerfile
          push: true # Push to Docker Hub
          tags: alihmohammad/devops-backend:${{ github.ref_name }} # Tags image with github tag from repo

  deploy-containers:
    name: Deploy Docker containers on Azure VM
    runs-on: ubuntu-latest
    needs: push-images
    steps:
      - name: Executing remote SSH commands
        uses: appleboy/ssh-action@v1.0.3
        env:
          TAG_NAME: ${{ github.ref_name }} # Github tag sendes som env TAG_NAME til VM
        with:
          host: ${{ vars.VM_IP_ADDRESS }}
          username: ${{ vars.VM_USER }}
          key: ${{ secrets.VM_PRIVATE_KEY }}
          envs: TAG_NAME
          script: |
            echo "cd to working directory"
            cd ./production  

            echo "Ensure Docker is installed"
            docker --version

            echo "Remove existing containers"
            sudo docker compose down

            echo "Delete all local images"
            sudo docker image prune --all --force

            echo "Insert variables for building containers"
            echo "TAG=$TAG_NAME" > .env

            echo "Build containers"
            sudo docker compose --env-file .env up -d

    

  automated-api-tests:
    name: API tests using Postman CLI
    runs-on: ubuntu-latest
    needs: deploy-containers
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: Run API tests
        run: |
          postman collection run ${{ vars.POSTMAN_COLLECTION }}
